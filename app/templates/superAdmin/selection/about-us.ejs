<!-- ===================================== custom css ========================================= -->
<link rel="stylesheet" href="/css/admin/student.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.css">

<div id="about-us-content" class="content-panel" style="display: none;">
    <h3 class="mb-4"><i class="bi bi-info-circle"></i> مدیریت بخش‌های درباره ما</h3>
    
    <!-- Add New Section Button -->
    <div class="row mb-4">
        <div class="col-12">
            <button class="btn btn-primary" onclick="showAddSectionModal()">
                <i class="bi bi-plus-circle me-2"></i>
                افزودن بخش جدید
            </button>
        </div>
    </div>

    <!-- Sections List -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-list-ul me-2"></i>
                        بخش‌های موجود
                    </h5>
                    <small class="text-muted">برای تغییر ترتیب، آیتم‌ها را با درگ و دراپ جابجا کنید</small>
                </div>
                <div class="card-body">
                    <div id="sections-container">
                        <!-- Sections will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div> 

<!-- Add/Edit Section Modal -->
<div class="modal fade" id="sectionModal" tabindex="-1" aria-labelledby="sectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sectionModalLabel">
                    <i class="bi bi-plus-circle me-2"></i>
                    افزودن بخش جدید
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="sectionForm">
                    <input type="hidden" id="sectionId" name="id">
                    
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="sectionType" class="form-label">نوع محتوا</label>
                                <select class="form-select" id="sectionType" name="type" required onchange="toggleContentFields()">
                                    <option value="">انتخاب کنید</option>
                                    <option value="text">متن</option>
                                    <option value="image">تصویر</option>
                                    <option value="file">فایل</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="sectionDescription" class="form-label">توضیحات (اختیاری)</label>
                        <textarea class="form-control" id="sectionDescription" name="description" rows="2" placeholder="توضیحات اختیاری برای این بخش..."></textarea>
                    </div>

                    <!-- Text Content Field -->
                    <div id="textContentField" class="mb-3" style="display: none;">
                        <label for="textContent" class="form-label">محتوای متنی</label>
                        <textarea class="form-control" id="textContent" name="textContent" rows="6" placeholder="محتوای متنی خود را اینجا وارد کنید..."></textarea>
                    </div>

                    <!-- File Upload Field -->
                    <div id="fileUploadField" class="mb-3" style="display: none;">
                        <label for="sectionFile" class="form-label">انتخاب فایل</label>
                        <input type="file" class="form-control" id="sectionFile" name="file">
                        <div class="form-text">فایل‌های تصویری در پوشه تصاویر و سایر فایل‌ها در پوشه فایل‌ها ذخیره می‌شوند</div>
                    </div>

                    <!-- Preview Fields -->
                    <div id="previewFields" style="display: none;">
                        <div class="mb-3">
                            <label class="form-label">پیش‌نمایش</label>
                            <div id="contentPreview" class="border rounded p-3 bg-light">
                                <!-- Preview content will be shown here -->
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-primary" onclick="saveSection()">
                    <i class="bi bi-check-circle me-2"></i>
                    ذخیره
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">تایید حذف</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>آیا از حذف این بخش اطمینان دارید؟</p>
                <p class="text-danger"><small>این عملیات قابل بازگشت نیست.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="bi bi-trash me-2"></i>
                    حذف
                </button>
            </div>
        </div>
    </div>
</div>
<style>
.section-item {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 10px;
    cursor: move;
    transition: all 0.3s ease;
    position: relative;
}

.section-item:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    transform: translateY(-2px);
}

.section-item.dragging {
    opacity: 0.5;
    transform: rotate(5deg);
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.section-type-badge {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-weight: bold;
}

.section-type-text { background: linear-gradient(45deg, #007bff, #0056b3); color: white; }
.section-type-image { background: linear-gradient(45deg, #28a745, #20c997); color: white; }
.section-type-file { background: linear-gradient(45deg, #ffc107, #e0a800); color: white; }

.section-content {
    margin-bottom: 10px;
}

.section-actions {
    display: flex;
    gap: 5px;
}

.section-actions .btn {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
}

.content-preview {
    max-height: 200px;
    overflow: hidden;
    border-left: 4px solid #007bff;
    padding-left: 10px;
    background: #f8f9fa;
    border-radius: 4px;
}

.content-preview img {
    max-width: 100%;
    max-height: 150px;
    object-fit: cover;
    border-radius: 4px;
}

.content-preview.file-preview {
    background: linear-gradient(135deg, #e3f2fd, #bbdefb);
    padding: 10px;
    border-radius: 8px;
}

.sortable-ghost {
    opacity: 0.3;
    background: #f8f9fa;
}

.sortable-chosen {
    background: #e3f2fd;
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>

<script>


let sections = [];
let currentSectionId = null;
let sortableInstance = null;

// بارگذاری بخش‌ها
async function loadSections() {
    try {
        const response = await apiRequest('/about-us', 'GET');
        if (response && response.success) {
            sections = response.data || [];
            renderSections();
            initializeSortable();
        }
    } catch (error) {
        showErrorAlert('خطا در دریافت بخش‌ها');
    }
}

// نمایش بخش‌ها
function renderSections() {
    const container = document.getElementById('sections-container');
    
    if (sections.length === 0) {
        container.innerHTML = `
            <div class="text-center py-4">
                <i class="bi bi-info-circle fs-1 text-muted"></i>
                <p class="text-muted mt-2">هنوز بخشی اضافه نشده است</p>
            </div>
        `;
        return;
    }

    let html = '';
    sections.forEach(section => {
        const typeBadge = getTypeBadge(section.type);
        const contentPreview = getContentPreview(section);
        
        html += `
            <div class="section-item" data-id="${section.id}">
                <div class="section-header">
                    <div class="d-flex align-items-center">
                        <span class="section-type-badge section-type-${section.type} me-2">
                            ${typeBadge}
                        </span>
                        <span class="fw-bold">ترتیب: ${section.order}</span>
                    </div>
                    <div class="section-actions">
                        <button class="btn btn-sm btn-outline-primary" onclick="editSection(${section.id})">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteSection(${section.id})">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
                
                ${section.description ? `
                    <div class="mb-2">
                        <small class="text-muted">
                            <i class="bi bi-info-circle me-1"></i>
                            ${section.description}
                        </small>
                    </div>
                ` : ''}
                
                <div class="section-content">
                    ${contentPreview}
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// دریافت نشان نوع محتوا
function getTypeBadge(type) {
    const badges = {
        'text': 'متن',
        'image': 'تصویر',
        'file': 'فایل'
    };
    return badges[type] || type;
}

// دریافت پیش‌نمایش محتوا
function getContentPreview(section) {
    switch (section.type) {
        case 'text':
            const text = section.textContent || '';
            return `
                <div class="content-preview">
                    <i class="bi bi-file-text me-2"></i>
                    ${text.length > 100 ? text.substring(0, 100) + '...' : text}
                </div>
            `;
        case 'image':
            return `
                <div class="content-preview">
                    <i class="bi bi-image me-2"></i>
                    <img src="${section.imagePath}" alt="تصویر" class="mt-2">
                </div>
            `;
        case 'file':
            const fileName = section.filePath ? section.filePath.split('/').pop() : '';
            return `
                <div class="content-preview file-preview">
                    <i class="bi bi-file-earmark me-2"></i>
                    <strong>فایل:</strong> ${fileName}
                </div>
            `;
        default:
            return '';
    }
}

// راه‌اندازی قابلیت درگ و دراپ
function initializeSortable() {
    const container = document.getElementById('sections-container');
    if (sortableInstance) {
        sortableInstance.destroy();
    }
    
    sortableInstance = new Sortable(container, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        onEnd: function(evt) {
            updateOrder();
        }
    });
}

// بروزرسانی ترتیب
async function updateOrder() {
    const items = document.querySelectorAll('.section-item');
    const newOrder = [];
    
    items.forEach((item, index) => {
        const id = parseInt(item.dataset.id);
        newOrder.push({ id, order: index });
    });
    
    try {
        const response = await apiRequest('/about-us/reorder', 'PATCH', { sections: newOrder });
        if (response && response.success) {
            showSuccessAlert('ترتیب با موفقیت تغییر کرد');
            loadSections(); // بارگذاری مجدد برای بروزرسانی ترتیب
        }
    } catch (error) {
        showErrorAlert('خطا در تغییر ترتیب');
    }
}

// نمایش مودال افزودن بخش جدید
function showAddSectionModal() {
    currentSectionId = null;
    document.getElementById('sectionModalLabel').innerHTML = '<i class="bi bi-plus-circle me-2"></i>افزودن بخش جدید';
    document.getElementById('sectionForm').reset();
    document.getElementById('sectionId').value = '';
    
    // مخفی کردن فیلدهای محتوا
    document.getElementById('textContentField').style.display = 'none';
    document.getElementById('fileUploadField').style.display = 'none';
    document.getElementById('previewFields').style.display = 'none';
    
    const modal = new bootstrap.Modal(document.getElementById('sectionModal'));
    modal.show();
}

// ویرایش بخش
async function editSection(id) {
    try {
        const response = await apiRequest(`/about-us/${id}`, 'GET');
        if (response && response.success) {
            const section = response.data;
            currentSectionId = id;
            
            document.getElementById('sectionModalLabel').innerHTML = '<i class="bi bi-pencil me-2"></i>ویرایش بخش';
            document.getElementById('sectionId').value = section.id;
            document.getElementById('sectionType').value = section.type;
            document.getElementById('sectionDescription').value = section.description || '';
            document.getElementById('textContent').value = section.textContent || '';
            
            toggleContentFields();
            showPreview();
            
            const modal = new bootstrap.Modal(document.getElementById('sectionModal'));
            modal.show();
        }
    } catch (error) {
        showErrorAlert('خطا در دریافت اطلاعات بخش');
    }
}

// تغییر فیلدهای محتوا بر اساس نوع
function toggleContentFields() {
    const type = document.getElementById('sectionType').value;
    const textField = document.getElementById('textContentField');
    const fileField = document.getElementById('fileUploadField');
    
    textField.style.display = type === 'text' ? 'block' : 'none';
    fileField.style.display = (type === 'image' || type === 'file') ? 'block' : 'none';
    
    if (type) {
        showPreview();
    }
}

// نمایش پیش‌نمایش
function showPreview() {
    const type = document.getElementById('sectionType').value;
    const previewContainer = document.getElementById('previewFields');
    const previewContent = document.getElementById('contentPreview');
    
    if (!type) {
        previewContainer.style.display = 'none';
        return;
    }
    
    let previewHtml = '';
    
    switch (type) {
        case 'text':
            const text = document.getElementById('textContent').value;
            previewHtml = `
                <div class="content-preview">
                    <i class="bi bi-file-text me-2"></i>
                    ${text || 'متنی وارد نشده'}
                </div>
            `;
            break;
        case 'image':
            previewHtml = `
                <div class="content-preview">
                    <i class="bi bi-image me-2"></i>
                    <div class="mt-2">
                        <small class="text-muted">تصویر در هنگام ذخیره آپلود خواهد شد</small>
                    </div>
                </div>
            `;
            break;
        case 'file':
            previewHtml = `
                <div class="content-preview file-preview">
                    <i class="bi bi-file-earmark me-2"></i>
                    <div class="mt-2">
                        <small class="text-muted">فایل در هنگام ذخیره آپلود خواهد شد</small>
                    </div>
                </div>
            `;
            break;
    }
    
    previewContent.innerHTML = previewHtml;
    previewContainer.style.display = 'block';
}

// ذخیره بخش
async function saveSection() {
    const formData = new FormData();
    const sectionId = document.getElementById('sectionId').value;
    const type = document.getElementById('sectionType').value;
    const order = sections.length; // ترتیب خودکار
    const description = document.getElementById('sectionDescription').value;
    const textContent = document.getElementById('textContent').value;
    const file = document.getElementById('sectionFile').files[0];
    
    if (!type) {
        showErrorAlert('لطفاً نوع محتوا را انتخاب کنید');
        return;
    }
    
    if (type === 'text' && !textContent.trim()) {
        showErrorAlert('لطفاً محتوای متنی را وارد کنید');
        return;
    }
    
    if ((type === 'image' || type === 'file') && !file && !sectionId) {
        showErrorAlert('لطفاً فایل را انتخاب کنید');
        return;
    }
    
    formData.append('type', type);
    formData.append('order', order);
    formData.append('description', description);
    
    if (type === 'text') {
        formData.append('textContent', textContent);
    }
    
    if (file) {
        formData.append('file', file);
    }
    
    try {
        const url = sectionId ? `/api/about-us/${sectionId}` : '/api/about-us';
        const method = sectionId ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            showSuccessAlert(sectionId ? 'بخش با موفقیت ویرایش شد' : 'بخش با موفقیت اضافه شد');
            bootstrap.Modal.getInstance(document.getElementById('sectionModal')).hide();
            loadSections();
        } else {
            showErrorAlert(result.message || 'خطا در ذخیره بخش');
        }
    } catch (error) {
        showErrorAlert('خطا در ارتباط با سرور');
    }
}

// حذف بخش
function deleteSection(id) {
    currentSectionId = id;
    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
    modal.show();
}

// تایید حذف
async function confirmDelete() {
    try {
        const response = await apiRequest(`/about-us/${currentSectionId}`, 'DELETE');
        if (response && response.success) {
            showSuccessAlert('بخش با موفقیت حذف شد');
            bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
            loadSections();
        } else {
            showErrorAlert(response?.message || 'خطا در حذف بخش');
        }
    } catch (error) {
        showErrorAlert('خطا در حذف بخش');
    }
}

// نمایش پیام موفقیت
function showSuccessAlert(message) {
    Swal.fire({
        title: 'موفق!',
        text: message,
        icon: 'success',
        confirmButtonText: 'باشه',
        confirmButtonColor: '#28a745'
    });
}

// نمایش پیام خطا
function showErrorAlert(message) {
    Swal.fire({
        title: 'خطا!',
        text: message,
        icon: 'error',
        confirmButtonText: 'باشه',
        confirmButtonColor: '#dc3545'
    });
}

// بارگذاری اولیه
if (document.getElementById('about-us-content')) {
    document.addEventListener('DOMContentLoaded', function() {
        loadSections();
        
        // اضافه کردن event listener برای تغییر نوع محتوا
        document.getElementById('sectionType').addEventListener('change', toggleContentFields);
        document.getElementById('textContent').addEventListener('input', showPreview);
        document.getElementById('sectionFile').addEventListener('change', showPreview);
    });
}
</script>
