<!-- ===================================== custom css ========================================= -->
<link rel="stylesheet" href="/css/admin/student.css">


<div id="student-content" class="content-panel" style="display: none;">
    <h3 class="mb-4"><i class="bi bi-people"></i> مدیریت دانشجویان</h3>
    
    <!-- Tabulator Container -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4 class="mb-0">لیست دانشجویان</h4>
            <button class="btn btn-primary" onclick="addNewStudent()">
                <i class="bi bi-plus-circle"></i> افزودن دانشجوی جدید
            </button>
        </div>
        <div class="card-body">
            <div id="studentsTable"></div>
        </div>
    </div>
</div>

<!-- Add/Edit Student Modal -->
<div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentModalLabel">افزودن دانشجوی جدید</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="studentForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="firstName" class="form-label">نام *</label>
                            <input type="text" class="form-control" id="firstName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="lastName" class="form-label">نام خانوادگی *</label>
                            <input type="text" class="form-control" id="lastName" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="phone" class="form-label">شماره تلفن *</label>
                            <input type="tel" class="form-control" id="phone" placeholder="09123456789" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="nationalCode" class="form-label">کد ملی *</label>
                            <input type="text" class="form-control" id="nationalCode" placeholder="1234567890" maxlength="10" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="studentId" class="form-label">شماره دانشجویی (۱۰ رقمی) *</label>
                            <input type="text" class="form-control" id="studentId" placeholder="مثلاً 1400123456" maxlength="10" minlength="10" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="password" class="form-label">رمز عبور *</label>
                            <input type="password" class="form-control" id="password" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="confirmPassword" class="form-label">تکرار رمز عبور *</label>
                            <input type="password" class="form-control" id="confirmPassword" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isGraduated">
                            <label class="form-check-label" for="isGraduated">
                                فارغ التحصیل است
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-primary" onclick="saveStudent()" id="saveBtn">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    ذخیره
                </button>
            </div>
        </div>
    </div>
</div>



<script>
let studentTable;
let editingStudentId = null;
let isStudentLoading = false;

// Load all students data from API
async function loadAllStudents() {
    try {
        const response = await apiRequest('/students', "GET");
        if (response && response.success) {
            return response.data;
        } else {
            showErrorAlert('خطا در دریافت اطلاعات دانشجویان');
            return [];
        }
    } catch (error) {
        showErrorAlert('خطا در دریافت اطلاعات دانشجویان');
        return [];
    }
}

// Initialize Tabulator
function initializeStudentTable() {
    studentTable = new Tabulator("#studentsTable", {
        data: [], // ابتدا خالی
        layout: "fitDataFill",
        pagination: "local",
        paginationSize: 10,
        paginationSizeSelector: [5, 10, 25, 50],
        paginationButtonCount: 5,
        paginationCounter: function(pageSize, currentRow, currentPage, totalRows, totalPages) {
            return `نمایش ${currentRow} تا ${currentRow + pageSize - 1} از ${totalRows} رکورد`;
        },
        columns: [
            {
                title: "شماره دانشجویی", 
                field: "studentId", 
                sorter: "number", 
                headerFilter: "input",
                formatter: function(cell) {
                    const value = cell.getValue();
                    return `<span class="clickable-cell" data-value="${value}" title="کلیک برای کپی">${value}</span>`;
                }
            },
            {
                title: "نام", 
                field: "firstName", 
                sorter: "string", 
                headerFilter: "input",
                formatter: function(cell) {
                    const value = cell.getValue();
                    return `<span class="clickable-cell" data-value="${value}" title="کلیک برای کپی">${value}</span>`;
                }
            },
            {
                title: "نام خانوادگی", 
                field: "lastName", 
                sorter: "string", 
                headerFilter: "input",
                formatter: function(cell) {
                    const value = cell.getValue();
                    return `<span class="clickable-cell" data-value="${value}" title="کلیک برای کپی">${value}</span>`;
                }
            },
            {
                title: "شماره تلفن", 
                field: "phone", 
                sorter: "string", 
                headerFilter: "input",
                formatter: function(cell) {
                    const value = cell.getValue();
                    return `<span class="clickable-cell" data-value="${value}" title="کلیک برای کپی">${value}</span>`;
                }
            },
            {
                title: "کد ملی", 
                field: "nationalCode", 
                sorter: "string", 
                headerFilter: "input",
                formatter: function(cell) {
                    const value = cell.getValue();
                    return `<span class="clickable-cell" data-value="${value}" title="کلیک برای کپی">${value}</span>`;
                }
            },
            {
                title: "وضعیت فارغ التحصیلی", 
                field: "isGraduated", 
                sorter: "boolean", 
                headerFilter: "select",
                headerFilterParams: {
                    values: [true, false]
                },
                formatter: function(cell) {
                    const isGraduated = cell.getValue();
                    const badgeClass = isGraduated ? 'badge bg-warning' : 'badge bg-success';
                    const text = isGraduated ? 'فارغ التحصیل' : 'در حال تحصیل';
                    return `<span class="${badgeClass}">${text}</span>`;
                }
            },
            {
                title: "عملیات",
                formatter: function(cell) {
                    const rowData = cell.getRow().getData();
                    const id = rowData.id;
                    return `
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" onclick="editStudent(${id})" title="ویرایش">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-info" onclick="toggleGraduation(${id})" title="تغییر وضعیت فارغ التحصیلی">
                                <i class="bi bi-mortarboard"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteStudent(${id})" title="حذف">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    `;
                },
                headerSort: false,
                headerFilter: false
            }
        ],
        locale: true,
        langs: {
            "fa": {
                "pagination": {
                    "first": "اول",
                    "first_title": "صفحه اول",
                    "last": "آخر",
                    "last_title": "صفحه آخر",
                    "prev": "قبلی",
                    "prev_title": "صفحه قبلی",
                    "next": "بعدی",
                    "next_title": "صفحه بعدی",
                    "all": "همه",
                    "counter": {
                        "showing": "نمایش",
                        "of": "از",
                        "rows": "رکورد",
                        "pages": "صفحه"
                    }
                },
                "headerFilters": {
                    "default": "فیلتر...",
                    "columns": {
                        "studentId": "جستجو در شماره دانشجویی...",
                        "firstName": "جستجو در نام...",
                        "lastName": "جستجو در نام خانوادگی...",
                        "phone": "جستجو در شماره تماس...",
                        "nationalCode": "جستجو در کد ملی...",
                        "isGraduated": "انتخاب وضعیت..."
                    }
                }
            }
        },
        initialSort: [
            {column: "studentId", dir: "desc"}
        ]
    });
    
    // بارگذاری اولیه داده‌ها
    refreshStudentTable();
    
    // اضافه کردن event listener برای کپی کردن
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('clickable-cell')) {
            const value = e.target.getAttribute('data-value');
            copyToClipboard(value);
        }
    });
}

// Refresh table data
async function refreshStudentTable() {
    try {
        const students = await loadAllStudents();
        if (students && students.length > 0) {
            studentTable.setData(students);
        } else {
            studentTable.setData([]);
        }
    } catch (error) {
        console.error('خطا در بروزرسانی جدول:', error);
    }
}

// Add new student
function addNewStudent() {
    editingStudentId = null;
    document.getElementById('studentModalLabel').textContent = 'افزودن دانشجوی جدید';
    document.getElementById('studentForm').reset();
    document.getElementById('password').required = true;
    document.getElementById('confirmPassword').required = true;
    document.getElementById('studentId').value = '';
    new bootstrap.Modal(document.getElementById('studentModal')).show();
}

// Edit student
async function editStudent(id) {
    try {
        const response = await apiRequest(`/student/${id}`, "GET");
        if (response && response.success) {
            const student = response.data;
            editingStudentId = id;
            
            document.getElementById('studentModalLabel').textContent = 'ویرایش دانشجو';
            document.getElementById('firstName').value = student.firstName;
            document.getElementById('lastName').value = student.lastName;
            document.getElementById('phone').value = student.phone;
            document.getElementById('nationalCode').value = student.nationalCode;
            document.getElementById('isGraduated').checked = student.isGraduated;
            document.getElementById('studentId').value = student.studentId || '';
            
            // رمز عبور اختیاری در ویرایش
            document.getElementById('password').required = false;
            document.getElementById('confirmPassword').required = false;
            
            new bootstrap.Modal(document.getElementById('studentModal')).show();
        } else {
            showErrorAlert('خطا در دریافت اطلاعات دانشجو');
        }
    } catch (error) {
        showErrorAlert('خطا در دریافت اطلاعات دانشجو');
    }
}

// Save student
async function saveStudent() {
    if (isStudentLoading) return;
    
    // اعتبارسنجی فرم
    const firstName = document.getElementById('firstName').value.trim();
    const lastName = document.getElementById('lastName').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const nationalCode = document.getElementById('nationalCode').value.trim();
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const isGraduated = document.getElementById('isGraduated').checked;
    const studentId = document.getElementById('studentId').value.trim();

    if (!firstName || !lastName || !phone || !nationalCode || !studentId) {
        showErrorAlert('لطفاً تمام فیلدهای اجباری را پر کنید');
        return;
    }

    if (!editingStudentId && (!password || !confirmPassword)) {
        showErrorAlert('رمز عبور و تکرار آن الزامی است');
        return;
    }

    if (password && password !== confirmPassword) {
        showErrorAlert('رمز عبور و تکرار آن یکسان نیستند');
        return;
    }

    if (nationalCode.length !== 10) {
        showErrorAlert('کد ملی باید 10 رقم باشد');
        return;
    }

    if (!/^(\+98|0)?9\d{9}$/.test(phone)) {
        showErrorAlert('فرمت شماره تلفن صحیح نیست');
        return;
    }

    if (!/^[0-9]{10}$/.test(studentId)) {
        showErrorAlert('شماره دانشجویی باید ۱۰ رقم باشد');
        return;
    }

    // نمایش loading
    isStudentLoading = true;
    const saveBtn = document.getElementById('saveBtn');
    const spinner = saveBtn.querySelector('.spinner-border');
    saveBtn.disabled = true;
    spinner.classList.remove('d-none');

    try {
        const formData = {
            firstName,
            lastName,
            phone,
            nationalCode,
            isGraduated,
            studentId
        };

        if (password) {
            formData.password = password;
        }

        let response;
        if (editingStudentId) {
            // ویرایش دانشجو
            response = await apiRequest(`/student/${editingStudentId}`, "PUT", formData);
        } else {
            // افزودن دانشجوی جدید
            response = await apiRequest("/student", "POST", formData);
        }

        if (response && response.success) {
            showSuccessAlert(editingStudentId ? 'دانشجو با موفقیت ویرایش شد' : 'دانشجو با موفقیت اضافه شد');
            bootstrap.Modal.getInstance(document.getElementById('studentModal')).hide();
            refreshStudentTable(); // بروزرسانی جدول
        } else {
            showErrorAlert(response?.message || 'خطا در ذخیره اطلاعات');
        }
    } catch (error) {
        showErrorAlert('خطا در ذخیره اطلاعات');
    } finally {
        // حذف loading
        isStudentLoading = false;
        saveBtn.disabled = false;
        spinner.classList.add('d-none');
    }
}

// Delete student
async function deleteStudent(id) {
    const result = await Swal.fire({
        title: 'آیا مطمئن هستید؟',
        text: "این عملیات قابل بازگشت نیست!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'بله، حذف کن!',
        cancelButtonText: 'انصراف'
    });

    if (result.isConfirmed) {
        try {
            const response = await apiRequest(`/student/${id}`, "DELETE");
                    if (response && response.success) {
            showSuccessAlert('دانشجو با موفقیت حذف شد');
            refreshStudentTable(); // بروزرسانی جدول
        } else {
                showErrorAlert(response?.message || 'خطا در حذف دانشجو');
            }
        } catch (error) {
            showErrorAlert('خطا در حذف دانشجو');
        }
    }
}

// Toggle graduation status
async function toggleGraduation(id) {
    try {
        const response = await apiRequest(`/student/${id}/toggle-graduation`, "PATCH");
        if (response && response.success) {
            
            showSuccessAlert(response.message);
            refreshStudentTable(); // بروزرسانی جدول
        } else {
            showErrorAlert(response?.message || 'خطا در تغییر وضعیت');
        }
    } catch (error) {
        showErrorAlert('خطا در تغییر وضعیت');
    }
}

// Add JS function for incrementTerm
async function incrementTerm(studentId) {
    try {
        // دریافت اطلاعات دانشجو
        const response = await apiRequest(`/student/${studentId}`, "GET");
        if (response && response.success) {
            const student = response.data;
            let newTerm = (parseInt(student.term, 10) || 1) + 1;
            if (newTerm > 20) {
                showErrorAlert('حداکثر ترم 20 است');
                return;
            }
            // ارسال درخواست بروزرسانی ترم
            const updateRes = await apiRequest(`/student/${studentId}`, "PUT", { term: newTerm });
            if (updateRes && updateRes.success) {
                showSuccessAlert('ترم دانشجو با موفقیت افزایش یافت');
                refreshStudentTable();
            } else {
                showErrorAlert(updateRes?.message || 'خطا در افزایش ترم');
            }
        } else {
            showErrorAlert('دانشجو یافت نشد');
        }
    } catch (error) {
        showErrorAlert('خطا در افزایش ترم');
    }
}

// Show success alert
function showSuccessAlert(message) {
    Swal.fire({
        title: 'موفق!',
        text: message,
        icon: 'success',
        confirmButtonText: 'باشه',
        confirmButtonColor: '#28a745'
    });
}

// Show error alert
function showErrorAlert(message) {
    Swal.fire({
        title: 'خطا!',
        text: message,
        icon: 'error',
        confirmButtonText: 'باشه',
        confirmButtonColor: '#dc3545'
    });
}

// Copy to clipboard function
async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
        
        // نمایش اعلان موفقیت با SweetAlert
        Swal.fire({
            title: 'کپی شد!',
            text: 'متن با موفقیت کپی شد',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false,
            toast: true,
            position: 'top-end'
        });
    } catch (err) {
        // روش جایگزین برای مرورگرهای قدیمی
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        
        Swal.fire({
            title: 'کپی شد!',
            text: 'متن با موفقیت کپی شد',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false,
            toast: true,
            position: 'top-end'
        });
    }
}

// Initialize table when content is shown
document.addEventListener('DOMContentLoaded', function() {
    const originalShowContent = window.showContent;
    window.showContent = function(contentType) {
        originalShowContent(contentType);
        if (contentType === 'student') {
            setTimeout(initializeStudentTable, 100);
        }
    };
});
</script>

